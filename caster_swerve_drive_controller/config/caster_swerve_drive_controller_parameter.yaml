caster_swerve_drive_controller:
  steering_joint_names: {
    type: string_array,
    default_value: ["steering_front_left_joint", "steering_front_right_joint", "steering_rear_left_joint", "steering_rear_right_joint"],
    description: "Names of the steering joints. Order should correspond to other module-specific parameters",
    validation: {
      not_empty<>: []
    }
  }

  driving_joint_names: {
    type: string_array,
    default_value: ["driving_front_left_joint", "driving_front_right_joint", "driving_rear_left_joint", "driving_rear_right_joint"],
    description: "Names of the driving joints. Order should correspond to steering_joint_names",
    validation: {
      not_empty<>: []
    }
  }

  wheel_radius: {
    type: double,
    default_value: 0.033,
    description: "Radius of the wheels in meters",
    validation: {
      gt<>: [0.0] # Must be greater than 0
    }
  }

  module_x_offsets: {
    type: double_array,
    default_value: [0.125,  0.125, -0.125, -0.125],
    description: "X offsets of each module from the robot's base_link origin in meters. Order matches joint_names."
  }

  module_y_offsets: {
    type: double_array,
    default_value: [0.125,  0.125, -0.125, -0.125],
    description: "Y offsets of each module from the robot's base_link origin in meters. Order matches joint_names."
  }

  module_angle_offsets: {
    type: double_array,
    default_value: [2.356171, 0.785375, -2.356171, -0.785375],
    description: "Angle offsets for each steering module in radians. This is the angle of the wheel relative to the robot's forward direction when the steering joint encoder reads zero. Order matches joint_names.",
  }

  caster_x_offset: {
    type: double,
    default_value: 0.02,
    description: "X offset in meters of caster's ground contact point from module's steering axis"
  }

  caster_y_offset: {
    type: double,
    default_value: 0.0,
    description: "Y offset in meters of caster's ground contact point from module's steering axis"
  }

  cmd_vel_topic: {
    type: string,
    default_value: "/cmd_vel",
    description: "Topic name for incoming velocity commands.",
  }

  cmd_vel_timeout: {
    type: double,
    default_value: 0.5,
    description: "Timeout for cmd_vel subscription in seconds. If no message is received within this time, the controller will stop.",
  }

  odometry_data_source: {
    type: string,
    default_value: "feedback",
    description: "Source for odometry calculation: 'feedback' (use joint states) or 'command' (use commanded joint values - open-loop).",
    validation: {
      one_of<>: [["feedback", "command"]]
    }
  }

  base_frame_id: {
    type: string,
    default_value: "base_link",
    description: "Robot's base frame ID for odometry and TF."
  }

  odom_frame_id: {
    type: string,
    default_value: "odom",
    description: "Odometry frame ID for odometry and TF."
  }

  enable_odom_tf: {
    type: bool,
    default_value: true,
    description: "Enable/disable publishing of odom -> base_frame TF."
  }

  open_loop: {
    type: bool,
    default_value: false,
    description: "If set to true the odometry of the robot will be calculated from the commanded values and not from feedback.",
  }