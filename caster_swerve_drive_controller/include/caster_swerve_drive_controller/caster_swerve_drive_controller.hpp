#ifndef CASTER_SWERVE_DRIVE_CONTROLLER__CASTER_SWERVE_DRIVE_CONTROLLER_HPP_
#define CASTER_SWERVE_DRIVE_CONTROLLER__CASTER_SWERVE_DRIVE_CONTROLLER_HPP_

#include <algorithm>
#include <cmath>
#include <functional>
#include <memory>
#include <queue>
#include <stdexcept>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"
#include "geometry_msgs/msg/twist.hpp"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "hardware_interface/loaned_command_interface.hpp"
#include "hardware_interface/loaned_state_interface.hpp"
#include "rcl_interfaces/msg/parameter_descriptor.hpp"
#include "rclcpp/parameter.hpp"
#include "rclcpp/subscription.hpp"
#include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_buffer.hpp"
#include "realtime_tools/realtime_publisher.hpp"

#include "caster_swerve_drive_controller/odometry.hpp"
#include "nav_msgs/msg/odometry.hpp"
#include "sensor_msgs/msg/joint_state.hpp"
#include "tf2_geometry_msgs/tf2_geometry_msgs.hpp"
#include "tf2_msgs/msg/tf_message.hpp"
#include "tf2_ros/transform_broadcaster.h"

#include "caster_swerve_drive_controller/marker_visualize.hpp"
#include "caster_swerve_drive_controller/speed_limiter.hpp"

// auto-generated by generate_parameter_library
#include "caster_swerve_drive_controller/caster_swerve_drive_controller_parameter.hpp"

namespace caster_swerve_drive_controller {

// Define aliases for convenience
using CallbackReturn =
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn;
using Twist = geometry_msgs::msg::Twist;
using TwistStamped = geometry_msgs::msg::TwistStamped;
using OdomMsg = nav_msgs::msg::Odometry;
using TfMsg = tf2_msgs::msg::TFMessage;

// Enum definitions
enum Rotation { CCW, CW, STOP };

// Structure to hold module information for easier access
struct ModuleHandles {
  // Use reference_wrapper for safe access in RT loop
  std::reference_wrapper<const hardware_interface::LoanedStateInterface>
      steering_state_pos;
  std::reference_wrapper<hardware_interface::LoanedCommandInterface>
      steering_cmd_pos;
  std::reference_wrapper<const hardware_interface::LoanedStateInterface>
      steering_state_vel;
  std::reference_wrapper<hardware_interface::LoanedCommandInterface>
      steering_cmd_vel;
  // Drive state might be needed for odometry (not implemented here)
  std::reference_wrapper<const hardware_interface::LoanedStateInterface>
      drive_state_vel;
  std::reference_wrapper<hardware_interface::LoanedCommandInterface>
      drive_cmd_vel;
  // Store parameters associated with this module
  double x_offset;
  double y_offset;
  double angle_offset;
};

class CasterSwerveDriveController
    : public controller_interface::ControllerInterface {
public:
  /**
   * @brief Constructor
   */
  CasterSwerveDriveController();

  /**
   * @brief Initialization function see @ControllerInterface::on_init
   */
  CallbackReturn on_init() override;

  /**
   * @brief Configuration function see @ControllerInterface::on_configure
   */
  CallbackReturn on_configure(const rclcpp_lifecycle::State &) override;

  /**
   * @brief Activation function see @ControllerInterface::on_activate
   */
  CallbackReturn on_activate(const rclcpp_lifecycle::State &) override;

  /**
   * @brief Deactivation function see @ControllerInterface::on_deactivate
   */
  CallbackReturn on_deactivate(const rclcpp_lifecycle::State &) override;

  /**
   * @brief Command interface configuration function see
   * @ControllerInterface::command_interface_configuration
   */
  controller_interface::InterfaceConfiguration
  command_interface_configuration() const override;

  /**
   * @brief State interface configuration function see
   * @ControllerInterface::state_interface_configuration
   */
  controller_interface::InterfaceConfiguration
  state_interface_configuration() const override;

  /**
   * @brief Update function see @ControllerInterface::update
   */
  controller_interface::return_type
  update(const rclcpp::Time &time, const rclcpp::Duration &period) override;

  // Parameters from ROS for caster swerve drive controller
  std::shared_ptr<ParamListener> param_listener_;
  Params params_;

protected:
  // Parameters
  rclcpp::Duration cmd_vel_timeout_ = rclcpp::Duration::from_seconds(0.5);
  size_t num_modules_ = 0;

  // Subscriber
  rclcpp::Subscription<TwistStamped>::SharedPtr cmd_vel_subscriber_ = nullptr;

  // Realtime buffer for incoming TwistStamped commands
  realtime_tools::RealtimeBuffer<std::shared_ptr<TwistStamped>> cmd_vel_buffer_;

  // Interface handles organized by module
  std::vector<ModuleHandles> module_handles_;

  // Internal state or variables for control logic
  double target_vx_ = 0.0;
  double target_vy_ = 0.0;
  double target_wz_ = 0.0;
  rclcpp::Time last_cmd_vel_time_;

  // Odometry
  Odometry odometry_;
  std::shared_ptr<rclcpp::Publisher<OdomMsg>> odometry_publisher_ = nullptr;
  std::shared_ptr<realtime_tools::RealtimePublisher<OdomMsg>>
      realtime_odometry_publisher_ = nullptr;

  // joint commander publisher
  using CommandedJointStatePublisher =
      realtime_tools::RealtimePublisher<sensor_msgs::msg::JointState>;
  rclcpp::Publisher<sensor_msgs::msg::JointState>::SharedPtr
      commanded_joint_state_publisher_ = nullptr;
  std::unique_ptr<CommandedJointStatePublisher>
      rt_commanded_joint_state_publisher_ = nullptr;

  // Odometry Parameters
  std::string odom_frame_id_;
  std::string base_frame_id_;
  bool enable_odom_tf_;
  std::vector<double> pose_covariance_diagonal_;
  std::vector<double> twist_covariance_diagonal_;
  int velocity_rolling_window_size_;
  std::string odom_source_;

  // TF Broadcaster
  std::shared_ptr<rclcpp::Publisher<TfMsg>> odometry_transform_publisher_ =
      nullptr;
  std::shared_ptr<realtime_tools::RealtimePublisher<TfMsg>>
      realtime_odometry_transform_publisher_ = nullptr;

  // Flag to check if stopping due to timeout
  bool enable_direct_joint_commands_ = false;
  double wheel_saturation_scale_factor_ = 1.0;
  bool enabled_wheel_saturation_scaling_ = false;

  rclcpp::Time previous_update_timestamp_{0};

  // Open Loop ctrl
  std::vector<double> previous_wheel_directions_;

  /**
   * @brief Normalize angle to be within the range [-pi, pi].
   */
  static double normalize_angle(double angle_rad);

  /**
   * @brief Calculate the shortest angular distance between two angles (result
   * in [-pi, pi]).
   */
  double shortest_angular_distance(double from, double to);

  double normalize_angle_positive(double angle);

  // Define ControllerReferenceMsg alias globally (if needed outside class)
  // using ControllerReferenceMsg = geometry_msgs::msg::Twist;
  // Not strictly needed if CmdVelMsg is used
  // Utility function prototype (global scope)
  void reset_controller_reference_msg(
      const std::shared_ptr<geometry_msgs::msg::Twist> &msg);
};
} // namespace caster_swerve_drive_controller

#endif // CASTER_SWERVE_DRIVE_CONTROLLER__CASTER_SWERVE_DRIVE_CONTROLLER_HPP_