#ifndef CASTER_SWERVE_DRIVE_CONTROLLER__CASTER_SWERVE_DRIVE_CONTROLLER_HPP_
#define CASTER_SWERVE_DRIVE_CONTROLLER__CASTER_SWERVE_DRIVE_CONTROLLER_HPP_

#include "controller_interface/chainable_controller_interface.hpp"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "realtime_tools/realtime_publisher.hpp"
#include "realtime_tools/realtime_thread_safe_box.hpp"

// auto-generated by generate_parameter_library
#include "caster_swerve_drive_controller/caster_swerve_drive_controller_parameter.hpp"

namespace caster_swerve_drive_controller {

class CasterSwerveDriveController
    : public controller_interface::ChainableControllerInterface {

  using TwistStamped = geometry_msgs::msg::TwistStamped;

public:
  CasterSwerveDriveController();

  controller_interface::InterfaceConfiguration
  command_interface_configuration() const override;

  controller_interface::InterfaceConfiguration
  state_interface_configuration() const override;

  controller_interface::return_type
  update_reference_from_subscribers(const rclcpp::Time &time,
                                    const rclcpp::Duration &period) override;

  controller_interface::return_type
  update_and_write_commands(const rclcpp::Time &time,
                            const rclcpp::Duration &period) override;

  controller_interface::CallbackReturn on_init() override;

  controller_interface::CallbackReturn
  on_configure(const rclcpp_lifecycle::State &previous_state) override;

  controller_interface::CallbackReturn
  on_activate(const rclcpp_lifecycle::State &previous_state) override;

  controller_interface::CallbackReturn
  on_deactivate(const rclcpp_lifecycle::State &previous_state) override;

protected:
  bool on_set_chained_mode(bool chained_mode) override;

  std::shared_ptr<ParamListener> param_listener_;
  Params params_;

  // Timeout to consider cmd_vel commands old
  rclcpp::Duration cmd_vel_timeout_ = rclcpp::Duration::from_seconds(0.5);

  // the realtime container to exchange the reference from subscriber
  realtime_tools::RealtimeThreadSafeBox<TwistStamped> received_velocity_msg_;
  // save the last reference in case of unable to get value from box
  TwistStamped command_msg_;

  rclcpp::Time previous_update_timestamp_{0};
};
} // namespace caster_swerve_drive_controller

#endif // CASTER_SWERVE_DRIVE_CONTROLLER__CASTER_SWERVE_DRIVE_CONTROLLER_HPP_